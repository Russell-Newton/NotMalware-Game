package whatexe.dungeoncrawler;

import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseButton;
import javafx.stage.Stage;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.testfx.api.FxToolkit;
import org.testfx.framework.junit5.ApplicationTest;
import whatexe.dungeoncrawler.controllers.LevelController;

import java.io.IOException;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class LevelTest extends ApplicationTest {
    @Override
    public void start(Stage stage) throws Exception {
        MainApp mainApp = new MainApp();
        mainApp.start(stage);

        SceneManager.getInstance().addScene("Level",
                                            getClass().getResource("controllers/LevelDisplay"
                                                                           + ".fxml"));
        // added a dummy scene that can be consistently switched to reload the first room
        SceneManager.getInstance().addScene("Example",
                                            getClass().getResource(
                                                    "controllers/ExampleController.fxml"));

        stage.toFront();
    }

    /**
     * Tests that the default difficulty set in the level room without parameters works as
     * intended,
     * by comparing the label and its contents to text that it is supposed to display.
     * Additionally, the test manually updates the health and money of the player, and it makes
     * sure the label and the progress bar that represent money and health of the players update
     * with it.
     */
    // @Test
    public void testDefaultDifficulty() {
        // Scenes can only be switched from the JavaFX application thead
        // interact queues the scene switch into the thread
        interact(() -> {
            try {
                MainApp.switchScene("Level");
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        Label healthLabel = lookup("#healthLabel").queryAs(Label.class);
        Label moneyLabel = lookup("#moneyLabel").queryAs(Label.class);
        ProgressBar healthBar = lookup("#healthBar").queryAs(ProgressBar.class);

        assertEquals("Health: 50 / 50", healthLabel.getText());
        assertEquals("Money: 25 / 25", moneyLabel.getText());
        assertEquals(1, healthBar.getProgress());

        LevelController levelController =
                (LevelController) SceneManager.getInstance().getSceneController(
                        "Level");
        interact(() -> {
            levelController.getPlayer().setHealth(30);
        });
        healthLabel = lookup("#healthLabel").queryAs(Label.class);
        healthBar = lookup("#healthBar").queryAs(ProgressBar.class);
        assertEquals("Health: 30 / 50", healthLabel.getText());
        assertEquals(0.6, healthBar.getProgress());
        interact(() -> {
            levelController.getPlayer().setMoney(20);
        });
        moneyLabel = lookup("#moneyLabel").queryAs(Label.class);
        assertEquals("Money: 20 / 25", moneyLabel.getText());
    }

    /**
     * Tests that the when the level is set to difficulty hard, the preset labels and health bar
     * in the UI display as intended. Additionally, it also tests to make sure that the labels
     * and the progressbar stay updated when player's money and health are changed.
     */
    // @Test
    public void testDifficultyHard() {
        interact(() -> {
            try {
                MainApp.switchScene("Level", Map.of("difficulty", Difficulty.HARD));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        Label healthLabel = lookup("#healthLabel").queryAs(Label.class);
        Label moneyLabel = lookup("#moneyLabel").queryAs(Label.class);
        ProgressBar healthBar = lookup("#healthBar").queryAs(ProgressBar.class);

        assertEquals("Health: 20 / 20", healthLabel.getText());
        assertEquals("Money: 10 / 10", moneyLabel.getText());
        assertEquals(1, healthBar.getProgress());

        LevelController levelController =
                (LevelController) SceneManager.getInstance().getSceneController(
                        "Level");
        interact(() -> {
            levelController.getPlayer().setHealth(10);
        });
        interact(() -> {
            levelController.getPlayer().setMoney(0);
        });
        healthLabel = lookup("#healthLabel").queryAs(Label.class);
        healthBar = lookup("#healthBar").queryAs(ProgressBar.class);
        moneyLabel = lookup("#moneyLabel").queryAs(Label.class);
        assertEquals("Health: 10 / 20", healthLabel.getText());
        assertEquals(0.5, healthBar.getProgress());
        assertEquals("Money: 0 / 10", moneyLabel.getText());
    }

    @AfterEach
    public void tearDown() throws Exception {
        FxToolkit.hideStage();

        release(new KeyCode[]{});
        release(new MouseButton[]{});

        SceneManager.getInstance().clear();
    }
}