package whatexe.dungeoncrawler.layout;

import javafx.scene.Node;
import javafx.scene.control.Button;
import whatexe.dungeoncrawler.entities.SimpleDoor;
import whatexe.tileengine.MapObject;
import whatexe.tileengine.TiledMap;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class SimpleRoom extends Room {
    
    public SimpleRoom(TiledMap fromTiledMap,
                      Level owningLevel,
                      Direction... directionsToGenerate) {
        super(fromTiledMap, owningLevel, directionsToGenerate);
    }

    @Override
    protected void initDoors(Direction[] directionsToGenerate) {
        List<MapObject> doorMapObject = fromTiledMap.getObjectGroups().get("Doors").getObjects();
        Collections.sort(doorMapObject, new MapObjectComparator());

        for (Direction direction : directionsToGenerate) {
            Node button = new Button(direction.toString());
            MapObject correspondingDoor;
            switch (direction) {
            case UP:
                correspondingDoor = doorMapObject.get(0);
                break;
            case LEFT:
                correspondingDoor = doorMapObject.get(1);
                break;
            case RIGHT:
                correspondingDoor = doorMapObject.get(2);
                break;
            case DOWN:
                correspondingDoor = doorMapObject.get(3);
                break;
            default:
                throw new RuntimeException("Did not initialize doors with Direction enums");
            }
            button.setTranslateX(correspondingDoor.getX());
            button.setTranslateY(correspondingDoor.getY());
            button.resize(correspondingDoor.getWidth(), correspondingDoor.getWidth());
            doors.add(new SimpleDoor(owningLevel, direction));
        }
    }

    @Override
    protected void initEntities() {

    }

    class MapObjectComparator implements Comparator<MapObject> {

        @Override
        public int compare(MapObject o1, MapObject o2) {
            if (o1.getX() < o2.getX()) {
                return -1;
            } else if (o1.getX() == o2.getX()) {
                if (o1.getY() < o2.getY()) {
                    return -1;
                } else {
                    return 1;
                }
            } else {
                return 1;
            }
        }
    }

}
