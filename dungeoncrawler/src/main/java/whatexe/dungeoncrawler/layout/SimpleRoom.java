package whatexe.dungeoncrawler.layout;

import javafx.scene.Node;
import javafx.scene.control.Button;
import whatexe.dungeoncrawler.entities.Door;
import whatexe.dungeoncrawler.entities.SimpleDoor;
import whatexe.tileengine.MapObject;
import whatexe.tileengine.TiledMap;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class SimpleRoom extends Room {
    List<Door> doors = new ArrayList<>();

    public SimpleRoom(TiledMap fromTiledMap,
                      Level owningLevel,
                      Direction... directionsToGenerate) {
        super(fromTiledMap, owningLevel, directionsToGenerate);
    }

    @Override
    protected void initDoors(Direction[] directionsToGenerate) {
        List<MapObject> doorMapObject = fromTiledMap.getObjectGroups().get("Doors").getObjects();
        if (doorMapObject.size() != directionsToGenerate.length) {
            throw new RuntimeException("Number of door directions must match the number of doors");
        }

        Collections.sort(doorMapObject, new MapObjectComparator());

        for (int i = 0; i < doorMapObject.size(); i++) {
            Node button = new Button(directionsToGenerate[i].toString());
            button.setTranslateX(doorMapObject.get(i).getX());
            button.setTranslateY(doorMapObject.get(i).getY());
            doors.add(new SimpleDoor(owningLevel, directionsToGenerate[i]));
        }
    }

    @Override
    protected void initEntities() {

    }

    class MapObjectComparator implements Comparator<MapObject> {

        @Override
        public int compare(MapObject o1, MapObject o2) {
            if (o1.getX() < o2.getX()) {
                return -1;
            } else if (o1.getX() == o2.getX()) {
                if (o1.getY() < o2.getY()) {
                    return -1;
                } else {
                    return 1;
                }
            } else {
                return 1;
            }
        }
    }

}
