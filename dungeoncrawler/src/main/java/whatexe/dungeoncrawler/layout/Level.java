package whatexe.dungeoncrawler.layout;

import java.util.HashMap;
import java.util.Map;

public class Level {

    private final RoomPositionProperty currentRoomPosition;
    private final RoomPositionProperty previousRoomPosition;
    private Map<RoomPosition, Room> maze;
    private int minX;
    private int maxX;
    private int minY;
    private int maxY;

    public Level() {
        this(new RoomPosition(0, 0));
    }

    public Level(RoomPosition startingRoomPosition) {
        currentRoomPosition = new RoomPositionProperty(startingRoomPosition);
        previousRoomPosition = new RoomPositionProperty(null);
        maze = new HashMap<>();
        minX = 1;
        maxX = -1;
        minY = 1;
        maxY = -1;
    }

    public Room getCurrentRoom() {
        return maze.get(currentRoomPosition.get());
    }

    public Room moveUp() {
        previousRoomPosition.set(currentRoomPosition.get());
        currentRoomPosition.set(currentRoomPosition.get().getAbove());
        return getCurrentRoom();
    }

    public Room moveDown() {
        previousRoomPosition.set(currentRoomPosition.get());
        currentRoomPosition.set(currentRoomPosition.get().getBelow());
        return getCurrentRoom();
    }

    public Room moveLeft() {
        previousRoomPosition.set(currentRoomPosition.get());
        currentRoomPosition.set(currentRoomPosition.get().getLeft());
        return getCurrentRoom();
    }

    public Room moveRight() {
        previousRoomPosition.set(currentRoomPosition.get());
        currentRoomPosition.set(currentRoomPosition.get().getRight());
        return getCurrentRoom();
    }

    public Room move(Direction direction) {
        previousRoomPosition.set(currentRoomPosition.get());
        currentRoomPosition.set(currentRoomPosition.get().getNeighbor(direction));
        return getCurrentRoom();
    }

    public Map<RoomPosition, Room> getMaze() {
        return maze;
    }

    public RoomPositionProperty currentRoomPositionProperty() {
        return currentRoomPosition;
    }

    private void initBounds() {
        for (RoomPosition position : maze.keySet()) {
            minX = Math.min(minX, position.getX());
            minY = Math.min(minY, position.getY());
            maxX = Math.max(maxX, position.getX());
            maxY = Math.max(maxY, position.getY());
        }
    }

    public int getHeight() {
        if (minX == 1) {
            initBounds();
        }
        return maxY - minY + 1;
    }

    public int getWidth() {
        if (minX == 1) {
            initBounds();
        }
        return maxX - minX + 1;
    }

    public String mazeToString() {
        getHeight();
        String[][] mazeRep = new String[maxY - minY + 1][maxX - minX + 1];
        for (Map.Entry<RoomPosition, Room> entry : maze.entrySet()) {
            RoomPosition position = entry.getKey();
            Room room = entry.getValue();
            if (position.equals(currentRoomPosition.get())) {
                mazeRep[position.getY() - minY][position.getX() - minX] = "C";
            } else {
                mazeRep[position.getY() - minY][position.getX() - minX] = room.getClass()
                                                                              .getSimpleName();
            }
        }

        StringBuilder builder = new StringBuilder();
        for (String[] row : mazeRep) {
            for (String room : row) {
                if (room == null) {
                    builder.append(" ");
                } else {
                    builder.append(room.charAt(0));
                }
            }
            builder.append("\n");
        }

        return builder.toString();
    }

    public RoomPosition getRoomPosition() {
        return currentRoomPosition.get();
    }

    public RoomPosition getPreviousRoomPosition() {
        if (previousRoomPosition.get() == null) {
            return null;
        }
        return previousRoomPosition.get();
    }
}
