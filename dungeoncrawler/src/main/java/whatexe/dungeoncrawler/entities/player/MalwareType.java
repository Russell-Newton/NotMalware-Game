package whatexe.dungeoncrawler.entities.player;

import javafx.scene.image.Image;
import whatexe.dungeoncrawler.entities.AnimatedSprite;
import whatexe.dungeoncrawler.entities.Sprite;
import whatexe.dungeoncrawler.entities.behavior.BehaviorSet;
import whatexe.dungeoncrawler.entities.behavior.EntityStatistics;
import whatexe.dungeoncrawler.entities.behavior.attack.specials.DoNothingSpecialAttack;
import whatexe.dungeoncrawler.entities.behavior.presets.PlayerBehaviorSet;
import whatexe.dungeoncrawler.entities.behavior.presets.TrojanBehaviorSet;
import whatexe.dungeoncrawler.entities.behavior.presets.VirusBehaviorSet;
import whatexe.dungeoncrawler.entities.behavior.presets.WormBehaviorSet;

public enum MalwareType {
    VIRUS {
        @Override
        public BehaviorSet getDefaultBehaviorSet(Player owningPlayer) {
            return new VirusBehaviorSet(owningPlayer);
        }

        @Override
        public EntityStatistics getDefaultStatModifiers() {
            EntityStatistics statistics = Player.getDefaultPlayerStatistics();
            statistics.setAttackDamageModifier(0.85);
            statistics.setAttackSpeedModifier(0.75);
            statistics.setSpeed(1);
            return statistics;
        }

        @Override
        public String getDescription() {
            return "Shoots a spread of three shots at once.\nSpecial: take half damage and reflect"
                    + " half of all contact damage for a time.";
        }

        @Override
        public double getMaxHealthModifier() {
            return 1;
        }

        @Override
        public Sprite getDefaultSprite() {
            return new AnimatedSprite(
                    new Image(getClass().getResourceAsStream("virus.png")),
                    32,
                    32,
                    4,
                    4,
                    1,
                    1000);
        }
    },
    WORM {
        @Override
        public BehaviorSet getDefaultBehaviorSet(Player owningPlayer) {
            return new WormBehaviorSet(owningPlayer);
        }

        @Override
        public EntityStatistics getDefaultStatModifiers() {
            EntityStatistics statistics = Player.getDefaultPlayerStatistics();
            statistics.setAttackDamageModifier(1.5);
            statistics.setSpeed(1.25);
            return statistics;
        }

        @Override
        public String getDescription() {
            return "Fast-moving and hard-hitting, but with less maximum health overall.\nSpecial: "
                    + "summons a dummy that distracts and shoots at enemies.";
        }

        @Override
        public double getMaxHealthModifier() {
            return 0.8;
        }

        @Override
        public Sprite getDefaultSprite() {
            return new AnimatedSprite(
                    new Image(getClass().getResourceAsStream("worm.png")),
                    32,
                    32,
                    4,
                    4,
                    1,
                    1000);
        }
    },
    TROJAN {
        @Override
        public BehaviorSet getDefaultBehaviorSet(Player owningPlayer) {
            return new TrojanBehaviorSet(owningPlayer);
        }

        @Override
        public EntityStatistics getDefaultStatModifiers() {
            EntityStatistics statistics = Player.getDefaultPlayerStatistics();
            statistics.setAttackDamageModifier(1.2);
            statistics.setAttackSpeedModifier(1.5);
            statistics.setSpeed(0.75);
            return statistics;
        }

        @Override
        public String getDescription() {
            return "Slower-moving with a hard-hitting short-range attack.\nSpecial: becomes "
                    + "invisible for a time.";
        }

        @Override
        public double getMaxHealthModifier() {
            return 1.5;
        }

        @Override
        public Sprite getDefaultSprite() {
            return new AnimatedSprite(
                    new Image(getClass().getResourceAsStream("trojan.png")),
                    32,
                    32,
                    4,
                    4,
                    1,
                    1000);
        }
    },
    RANSOMWARE {
        @Override
        public BehaviorSet getDefaultBehaviorSet(Player owningPlayer) {
            return new PlayerBehaviorSet(owningPlayer, new DoNothingSpecialAttack(owningPlayer));
        }

        @Override
        public EntityStatistics getDefaultStatModifiers() {
            EntityStatistics statistics = Player.getDefaultPlayerStatistics();
            statistics.setAttackDamageModifier(1.5);
            statistics.setAttackSpeedModifier(1);
            statistics.setSpeed(1.25);
            return statistics;
        }

        @Override
        public String getDescription() {
            return "Ransomware hehe";
        }

        @Override
        public double getMaxHealthModifier() {
            return 1;
        }

        @Override
        public Sprite getDefaultSprite() {
            return new AnimatedSprite(
                    new Image(getClass().getResourceAsStream("ransomware.png")),
                    32,
                    32,
                    4,
                    4,
                    1,
                    1000);
        }
    },
    SPYWARE {
        @Override
        public BehaviorSet getDefaultBehaviorSet(Player owningPlayer) {
            return new PlayerBehaviorSet(owningPlayer, new DoNothingSpecialAttack(owningPlayer));
        }

        @Override
        public EntityStatistics getDefaultStatModifiers() {
            EntityStatistics statistics = Player.getDefaultPlayerStatistics();
            statistics.setAttackDamageModifier(1);
            statistics.setAttackSpeedModifier(1.25);
            statistics.setSpeed(1);
            return statistics;
        }

        @Override
        public String getDescription() {
            return "Spyware hehe";
        }

        @Override
        public double getMaxHealthModifier() {
            return 1.25;
        }

        @Override
        public Sprite getDefaultSprite() {
            return new AnimatedSprite(
                    new Image(getClass().getResourceAsStream("spyware.png")),
                    32,
                    32,
                    4,
                    4,
                    1,
                    1000);
        }
    };

    public abstract BehaviorSet getDefaultBehaviorSet(Player owningPlayer);

    public abstract EntityStatistics getDefaultStatModifiers();

    public abstract String getDescription();

    public abstract double getMaxHealthModifier();

    public abstract Sprite getDefaultSprite();

}
