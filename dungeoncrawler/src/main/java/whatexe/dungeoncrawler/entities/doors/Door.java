package whatexe.dungeoncrawler.entities.doors;

import javafx.beans.property.SimpleBooleanProperty;
import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.shape.Shape;
import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.behavior.overlap.DoorOverlapBehavior;
import whatexe.dungeoncrawler.layout.Direction;
import whatexe.dungeoncrawler.layout.Level;
import whatexe.dungeoncrawler.layout.rooms.Room;

public abstract class Door extends Entity {
    protected final Level owningLevel;
    protected final Direction direction;
    protected SimpleBooleanProperty isLocked;

    public Door(Node displayNode, Level owningLevel, Direction direction, Shape hitbox,
                Room owningRoom) {
        super(displayNode, hitbox, owningRoom);
        this.owningLevel = owningLevel;
        this.direction = direction;
        this.isLocked = new SimpleBooleanProperty(true);

        getBehaviorSet().setOverlapBehavior(new DoorOverlapBehavior(this));
    }

    public Door(Node displayNode, Level owningLevel, Direction direction, Room owningRoom) {
        super(displayNode, owningRoom);
        this.owningLevel = owningLevel;
        this.direction = direction;
        this.isLocked = new SimpleBooleanProperty(true);

        getBehaviorSet().setOverlapBehavior(new DoorOverlapBehavior(this));
    }

    /**
     * When given a list of doors, it will return the first door in that list with the direction
     * specified
     *
     * @param doors     List of doors to search through
     * @param direction The direction of the returning door
     * @return The door from the list with the specified direction
     */
    public static Door getDoorFromList(ObservableList<Door> doors, Direction direction) {
        for (Door door : doors) {
            if (door.direction == direction) {
                return door;
            }
        }
        return null;
    }

    public Direction getDirection() {
        return direction;
    }

    public void updateDoorLock() {
        if (this.isLocked.get()) {
            this.displayNode.setStyle("-fx-background-color: lightCoral;");
        } else {
            this.displayNode.setStyle("-fx-background-color: lightGreen;");
        }
    }

    public void unlock() {
        this.isLocked.set(false);
        updateDoorLock();
    }

    public boolean isLocked() {
        return isLocked.get();
    }

    public Level getOwningLevel() {
        return owningLevel;
    }
}
