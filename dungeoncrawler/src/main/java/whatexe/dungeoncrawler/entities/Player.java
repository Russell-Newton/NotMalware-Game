package whatexe.dungeoncrawler.entities;

import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.Node;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.shape.Rectangle;
import whatexe.dungeoncrawler.MainApp;
import whatexe.dungeoncrawler.layout.Room;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

import static javafx.scene.input.KeyCode.*;


public class Player extends Entity {
    private final SimpleIntegerProperty health;
    private final SimpleIntegerProperty money;
    /**
     * A map of key bindings, mapped to boolean {@link Consumer}s. The Consumers receive true if
     * the key was pressed and false if the key was released.
     */
    private final Map<KeyCode, Consumer<Boolean>> keyBindings;

    private Room currentRoom;

    private boolean goNorth;
    private boolean goSouth;
    private boolean goEast;
    private boolean goWest;

    public Player(Node displayNode) {
        super(displayNode);
        canTick = true;

        health = new SimpleIntegerProperty();
        money = new SimpleIntegerProperty();
        keyBindings = new HashMap<>();
    }

    public void initControls() {
        keyBindings.put(UP, pressed -> goNorth = pressed);
        keyBindings.put(W, pressed -> goNorth = pressed);
        keyBindings.put(DOWN, pressed -> goSouth = pressed);
        keyBindings.put(S, pressed -> goSouth = pressed);
        keyBindings.put(LEFT, pressed -> goWest = pressed);
        keyBindings.put(A, pressed -> goWest = pressed);
        keyBindings.put(RIGHT, pressed -> goEast = pressed);
        keyBindings.put(D, pressed -> goEast = pressed);

        MainApp.getPrimaryStage().getScene().addEventFilter(KeyEvent.KEY_PRESSED, (event) -> {
            try {
                keyBindings.get(event.getCode()).accept(true);
            } catch (NullPointerException ignored) {
            }

        });

        MainApp.getPrimaryStage().getScene().addEventFilter(KeyEvent.KEY_RELEASED, (event) -> {
            try {
                keyBindings.get(event.getCode()).accept(false);
            } catch (NullPointerException ignored) {
            }
        });
    }

    public SimpleIntegerProperty healthProperty() {
        return health;
    }

    public void setHealth(int health) {
        this.health.set(health);
    }

    public void adjustHealth(int dHealth) {
        health.set(health.getValue() + dHealth);
    }

    public SimpleIntegerProperty moneyProperty() {
        return money;
    }

    public void setMoney(int money) {
        this.money.set(money);
    }

    public void adjustMoney(int dMoney) {
        money.set(money.getValue() + dMoney);
    }

    public void setCurrentRoom(Room currentRoom) {
        this.currentRoom = currentRoom;
    }

    public void setGoNorth(boolean goNorth) {
        this.goNorth = goNorth;
    }

    public void setGoSouth(boolean goSouth) {
        this.goSouth = goSouth;
    }

    public void setGoEast(boolean goEast) {
        this.goEast = goEast;
    }

    public void setGoWest(boolean goWest) {
        this.goWest = goWest;
    }

    public double getHeight() {
        return ((Rectangle) displayNode).getHeight();
    }

    public double getWidth() {
        return ((Rectangle) displayNode).getWidth();
    }

    @Override
    public void tick(long now) {
        int dx = 0;
        int dy = 0;
        if (goNorth) {
            dy -= 1;
        }
        if (goSouth) {
            dy += 1;
        }
        if (goEast) {
            dx += 1;
        }
        if (goWest) {
            dx -= 1;
        }

        moveNode(dx, dy);
    }
}
