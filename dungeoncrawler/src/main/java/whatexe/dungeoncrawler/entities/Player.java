package whatexe.dungeoncrawler.entities;

import javafx.animation.AnimationTimer;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.Node;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;


public class Player extends Entity {
    /*
    TODO - For Gabe and Allison:
        - Enable movement (can be done with controller.setOnKeyPressed(...) and setOnKeyReleased(
            ...) and a technique similar to the one done here:
            https://gist.github.com/jewelsea/8321740).
            Movement should be enabled when the Player is added to the LevelController's SubScene.
        - Consider implementing a way for creating an entity that can be used to damage Enemies
            (A melee/ranged attack entity can be used to keep transfer damage, instead of keeping
             track of all Enemies inside of this Player object).
             Could create a new WeaponType enum that gets passed in to the Player constructor and
             determines this behavior.
     */

    private final SimpleIntegerProperty health;
    private final SimpleIntegerProperty money;
    private final AnimationTimer timer = new AnimationTimer() {
        @Override
        public void handle(long now) {
            int dx = 0, dy = 0;
            if (goNorth) dy -= 1;
            if (goSouth) dy += 1;
            if (goEast)  dx += 1;
            if (goWest)  dx -= 1;

            movePlayerBy(dx, dy);
        }
    };

    boolean goNorth, goSouth, goEast, goWest;

    public Player(Node displayNode) {
        super(displayNode);

        health = new SimpleIntegerProperty();
        money = new SimpleIntegerProperty();
        timer.start();

    }

    private void playerMovementDetection() {
        this.displayNode.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                switch (event.getCode()) {
                    case UP:    goNorth = true; break;
                    case DOWN:  goSouth = true; break;
                    case LEFT:  goWest  = true; break;
                    case RIGHT: goEast  = true; break;
                }
            }
        });

        this.displayNode.setOnKeyReleased(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                switch (event.getCode()) {
                    case UP:    goNorth = false; break;
                    case DOWN:  goSouth = false; break;
                    case LEFT:  goWest  = false; break;
                    case RIGHT: goEast  = false; break;
                }
            }
        });
    }

    private void movePlayerBy(int dx, int dy) {
        if (dx == 0 && dy == 0) {
            return;
        }

        final double cx = this.displayNode.getBoundsInLocal().getCenterX();
        final double cy = this.displayNode.getBoundsInLocal().getCenterY();

        double x = cx + this.displayNode.getLayoutX() + dx;
        double y = cy + this.displayNode.getLayoutY() + dy;

        movePlayerTo(x, y);
    }

    private void movePlayerTo(double x, double y) {
        final double cx = this.displayNode.getBoundsInLocal().getCenterX();
        final double cy = this.displayNode.getBoundsInLocal().getCenterY();

        if (x - cx >= 0 &&
            x + cx <= this.displayNode.getBoundsInLocal().getWidth() &&
            y - cy >= 0 &&
            y + cy <= this.displayNode.getBoundsInLocal().getHeight()) {
            this.displayNode.relocate(x, y);
        }
    }

    public SimpleIntegerProperty healthProperty() {
        return health;
    }

    public void setHealth(int health) {
        this.health.set(health);
    }

    public void adjustHealth(int dHealth) {
        health.set(health.getValue() + dHealth);
    }

    public SimpleIntegerProperty moneyProperty() {
        return money;
    }

    public void setMoney(int money) {
        this.money.set(money);
    }

    public void adjustMoney(int dMoney) {
        money.set(money.getValue() + dMoney);
    }
}
