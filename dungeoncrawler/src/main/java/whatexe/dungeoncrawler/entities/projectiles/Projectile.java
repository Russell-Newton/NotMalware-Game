package whatexe.dungeoncrawler.entities.projectiles;

import javafx.scene.Node;
import javafx.scene.shape.Circle;
import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.behavior.EntityStatistics;
import whatexe.dungeoncrawler.entities.behavior.sets.BehaviorSet;
import whatexe.dungeoncrawler.entities.behavior.DoNothing;
import whatexe.dungeoncrawler.entities.behavior.death.RemoveOnDeathBehavior;
import whatexe.dungeoncrawler.entities.behavior.movement.SimpleMovementBehavior;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;
import whatexe.dungeoncrawler.layout.rooms.Room;

public abstract class Projectile extends Entity {

    protected int lifetime;

    public Projectile(Node displayNode, Room owningRoom, Vector direction, int lifetime,
                      EntityStatistics statistics) {
        super(displayNode, owningRoom, statistics);
        this.lifetime = lifetime;
        canTick = true;

        behaviorSet.set(new BehaviorSet(new DoNothing(),
                                        new SimpleMovementBehavior(this, direction),
                                        new RemoveOnDeathBehavior(this)));
    }

    public Projectile(Room owningRoom, double speed, Vector direction, int damage, int lifetime,
                      double radius) {
        super(new Circle(radius), owningRoom);
        this.lifetime = lifetime;
        canTick = true;

        entityStatistics.setSpeed(speed);
        entityStatistics.setAttackDamage(damage);

        behaviorSet.set(new BehaviorSet(new DoNothing(),
                                        new SimpleMovementBehavior(this, direction),
                                        new RemoveOnDeathBehavior(this)));

    }

    public Projectile(Room owningRoom, double speed, Vector direction, int damage, double radius) {
        this(owningRoom, speed, direction, damage, -1, radius);
    }

    public void handleOnEntityCollision(Entity other) {
        setHealth(-1);
    }

    @Override
    public void handleOnBoundaryCollision() {
        setHealth(-1);
    }

    @Override
    public void tick() {
        super.tick();
        if (lifetime > 0) {
            lifetime--;
        }
        if (lifetime == 0) {
            setHealth(-1);
        }
    }
}
