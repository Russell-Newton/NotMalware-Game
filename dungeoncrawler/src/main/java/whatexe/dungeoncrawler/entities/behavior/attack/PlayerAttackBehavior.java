package whatexe.dungeoncrawler.entities.behavior.attack;

import javafx.beans.property.SimpleIntegerProperty;
import whatexe.dungeoncrawler.entities.Player;
import whatexe.dungeoncrawler.entities.behavior.EntityBehavior;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;
import whatexe.dungeoncrawler.entities.projectiles.PlayerProjectile;

public class PlayerAttackBehavior extends EntityBehavior<Player> implements AttackBehavior {

    private boolean isAttacking;
    private final SimpleIntegerProperty attackDelay;
    private final SimpleIntegerProperty attackDamage;
    private int ticksSinceAttack;
    private Vector attackDirection = new Vector(1, 1);

    public PlayerAttackBehavior(Player owningEntity) {
        super(owningEntity);

        attackDamage = new SimpleIntegerProperty();
        attackDamage.bindBidirectional(owningEntity.attackDamageProperty());
        attackDelay = new SimpleIntegerProperty();
        attackDelay.bindBidirectional(owningEntity.attackDelayProperty());
    }

    @Override
    public boolean canAttack() {
        ticksSinceAttack = Math.max(0, ticksSinceAttack - 1);
        return isAttacking && ticksSinceAttack <= 0;
    }

    @Override
    public void attack() {
        Vector movementDirection =
                owningEntity.getBehaviorSet().getMovementBehavior().getMovement();
        if (!movementDirection.isZero()) {
            attackDirection = movementDirection;
        }
        PlayerProjectile bullet = new PlayerProjectile(owningEntity.getOwningRoom(),
                                                       5,
                                                       attackDirection,
                                                       attackDamage.get());
        bullet.getDisplayNode().setTranslateX(owningEntity.getDisplayNode().getTranslateX());
        bullet.getDisplayNode().setTranslateY(owningEntity.getDisplayNode().getTranslateY());
        owningEntity.getOwningRoom().getMiscEntities().add(bullet);

        ticksSinceAttack = attackDelay.get();
    }

    public boolean isAttacking() {
        return isAttacking;
    }

    public void setAttacking(boolean attacking) {
        isAttacking = attacking;
        if (!attacking) {
            ticksSinceAttack = 0;
        }
    }

}
