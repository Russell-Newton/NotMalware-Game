package whatexe.dungeoncrawler.entities.behavior.movement;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleObjectProperty;
import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.behavior.EntityBehavior;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;

import java.util.Arrays;
import java.util.List;

/**
 * Uses linear interpolation to return the necessary displacement for an entity moving along a
 * path. Assumes the entity actually moves every tick.
 */
public class PathFollowingBehavior extends EntityBehavior<Entity> implements MovementBehavior {

    private final List<Vector> path;
    private final SimpleObjectProperty<FollowType> followType;
    private final SimpleDoubleProperty speed;
    private Vector currentPosition;

    public PathFollowingBehavior(Entity owningEntity, FollowType followType,
                                 double speed, List<Vector> path) {
        super(owningEntity);

        this.path = path;
        this.followType = new SimpleObjectProperty<>(followType);
        this.speed = new SimpleDoubleProperty(speed);

        if (path.size() <= 1) {
            currentPosition = new Vector(0, 0);
        } else {
            currentPosition = this.path.get(0);
        }
    }

    public PathFollowingBehavior(Entity owningEntity, FollowType followType,
                                 double speed, Vector... path) {
        this(owningEntity, followType, speed, Arrays.asList(path));
    }

    public PathFollowingBehavior(Entity owningEntity, double speed, Vector... path) {
        this(owningEntity, FollowType.AUTO_REVERSE, speed, path);
    }

    @Override
    public Vector getMovement() {
        if (path.size() <= 1) {
            return new Vector(0, 0);
        }

        return new Vector(0, 0);
    }

    public List<Vector> getPath() {
        return path;
    }

    public FollowType getFollowType() {
        return followType.get();
    }

    public SimpleObjectProperty<FollowType> followTypeProperty() {
        return followType;
    }

    public double getSpeed() {
        return speed.get();
    }

    public SimpleDoubleProperty speedProperty() {
        return speed;
    }

    public void setSpeed(double speed) {
        this.speed.set(speed);
    }

    public enum FollowType {
        LOOP,
        AUTO_REVERSE
    }
}
