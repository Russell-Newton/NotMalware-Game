package whatexe.dungeoncrawler.entities.behavior.attack;

import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import whatexe.dungeoncrawler.entities.player.Player;
import whatexe.dungeoncrawler.entities.behavior.death.RemoveOnDeathBehavior;
import whatexe.dungeoncrawler.entities.behavior.movement.GravitationalPullingBehavior;
import whatexe.dungeoncrawler.entities.behavior.movement.MovementBehavior;
import whatexe.dungeoncrawler.entities.behavior.sets.BehaviorSet;
import whatexe.dungeoncrawler.entities.enemies.Enemy;
import whatexe.dungeoncrawler.entities.friends.Friend;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;
import whatexe.dungeoncrawler.entities.projectiles.PlayerProjectile;
import whatexe.dungeoncrawler.entities.projectiles.Projectile;

import java.util.ArrayList;

public class WormSpecialAttack extends SpecialAttackBehavior {
    public WormSpecialAttack(Player owningEntity, int maxRecharge) {
        super(owningEntity, maxRecharge);
    }

    @Override
    protected void execute() {
        DummyPlayer dummy = new DummyPlayer();
        owningEntity.getOwningRoom().getFriends().add(dummy);

        recharge = 0;
    }

    private class DummyPlayer extends Friend {
        public DummyPlayer() {
            super(new Rectangle(20, 20, Color.DARKBLUE), owningEntity.getOwningRoom());
            canTick = true;

            setEntityPosition(owningEntity.getDisplayNode().getTranslateX(),
                              owningEntity.getDisplayNode().getTranslateY());

            entityStatistics.copyFrom(owningEntity.getEntityStatistics());
            entityStatistics.setMaxHealth(getEntityStatistics().getMaxHealth());
            entityStatistics.setAttackDelay(
                    2 * owningEntity.getEntityStatistics().getAttackDelay());
            entityStatistics.setAttackSpeedModifier(owningEntity.getEntityStatistics()
                                                                .getAttackSpeedModifier());
            entityStatistics.setAttackDamage(
                    owningEntity.getEntityStatistics().getAttackDamage());

            behaviorSetProperty().set(new BehaviorSet(getDefaultAttackBehavior(),
                                                      getDefaultMovementBehavior(),
                                                      new RemoveOnDeathBehavior(this)));
        }

        public MovementBehavior getDefaultMovementBehavior() {
            return new GravitationalPullingBehavior(
                    this, () -> new ArrayList<>(owningRoom.getEnemies()),
                    -1e-8,
                    new Vector(0, 0));
        }

        public AttackBehavior getDefaultAttackBehavior() {
            return new AttackNearestTargetBehavior<Enemy>(this,
                                                          owningRoom::getEnemies) {
                @Override
                protected Projectile getDefaultProjectile(Vector attackDirection) {
                    return new PlayerProjectile(
                            WormAttackBehavior.getDefaultDisplayNode(),
                            owningEntity.getOwningRoom(),
                            attackDirection,
                            WormAttackBehavior.getDefaultLifetime(),
                            WormAttackBehavior.getDefaultProjectileStatistics(owningEntity));
                }
            };
        }
    }
}
