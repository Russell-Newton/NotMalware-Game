package whatexe.dungeoncrawler.entities.behavior.attack;

import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;

import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public abstract class AttackNearestTargetBehavior extends AttackBehavior<Entity> {

    private final Supplier<List<? extends Entity>> targetsSuppler;

    public AttackNearestTargetBehavior(Entity owningEntity,
                                       Supplier<List<? extends Entity>> targetsSuppler) {
        super(owningEntity);

        this.targetsSuppler = targetsSuppler;
    }

    @Override
    public abstract List<? extends Entity> getDefaultAttackEntities();

    @Override
    protected void setAttackDirection() {
        Entity target = getTarget();
        if (target == null) {
            attackDirection = new Vector(0, 0);
            return;
        }

        attackDirection = owningEntity.vectorToOtherEntity(target);
    }

    protected Entity getTarget() {
        List<? extends Entity> targets = targetsSuppler.get();
        if (targets.size() == 0) {
            return null;
        }

        return targets.stream().sorted((o1, o2) -> {
            if (o1.equals(o2)) {
                return 0;
            }
            if (owningEntity.vectorToOtherEntity(o1).magnitude()
                    - owningEntity.vectorToOtherEntity(o2).magnitude() < 0) {
                return -1;
            }
            return 1;
        }).collect(Collectors.toList()).get(0);
    }
}
