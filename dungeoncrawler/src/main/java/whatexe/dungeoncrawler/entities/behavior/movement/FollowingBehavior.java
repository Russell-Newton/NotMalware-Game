package whatexe.dungeoncrawler.entities.behavior.movement;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.geometry.Bounds;
import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.behavior.EntityBehavior;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;

import java.util.function.Supplier;

public class FollowingBehavior extends EntityBehavior<Entity> implements MovementBehavior {

    private final SimpleObjectProperty<Supplier<Entity>> targetSupplier;
    private final SimpleDoubleProperty speed;

    public FollowingBehavior(Entity owningEntity, Supplier<Entity> targetSupplier, double speed) {
        super(owningEntity);

        this.targetSupplier = new SimpleObjectProperty<>(targetSupplier);
        this.speed = new SimpleDoubleProperty(speed);
    }

    public FollowingBehavior(Entity owningEntity,
                             Supplier<Entity> targetSupplier,
                             SimpleDoubleProperty speed) {
        super(owningEntity);

        this.targetSupplier = new SimpleObjectProperty<>(targetSupplier);
        this.speed = speed;
    }

    @Override
    public Vector getMovement() {
        Vector toTarget = owningEntity.vectorToOtherEntity(getTarget());
        if (toTarget.isZero()) {
            return toTarget;
        }
        return toTarget.unit().scaledBy(speed.get());
    }

    public Entity getTarget() {
        return targetSupplier.get().get();
    }

    public Supplier<Entity> getTargetSupplier() {
        return targetSupplier.get();
    }

    public void setTargetSupplier(Supplier<Entity> targetSupplier) {
        this.targetSupplier.set(targetSupplier);
    }

    public double getSpeed() {
        return speed.get();
    }

    public SimpleDoubleProperty speedProperty() {
        return speed;
    }

    public void setSpeed(double speed) {
        this.speed.set(speed);
    }

    public SimpleObjectProperty<Supplier<Entity>> targetSupplierProperty() {
        return targetSupplier;
    }
}
