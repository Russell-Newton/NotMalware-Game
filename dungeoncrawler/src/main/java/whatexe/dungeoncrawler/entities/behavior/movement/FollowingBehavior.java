package whatexe.dungeoncrawler.entities.behavior.movement;

import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.behavior.EntityBehavior;
import whatexe.dungeoncrawler.entities.motionsupport.Vector;

import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class FollowingBehavior extends EntityBehavior<Entity> implements MovementBehavior {

    private final Supplier<List<Entity>> targetsSupplier;

    public FollowingBehavior(Entity owningEntity,
                             Supplier<List<Entity>> targetsSupplier) {
        super(owningEntity);

        this.targetsSupplier = targetsSupplier;
    }

    @Override
    public Vector getMovement() {
        Vector toTarget = owningEntity.vectorToOtherEntity(getTarget());
        if (toTarget.isZero()) {
            return toTarget;
        }
        return toTarget.unit().scaledBy(owningEntity.getEntityStatistics().getModifiedSpeed());
    }

    public Entity getTarget() {
        List<Entity> targets = targetsSupplier.get();
        if (targets.size() == 0) {
            return null;
        }

        Entity target = targets.stream().sorted((o1, o2) -> {
            if (o1.equals(o2)) {
                return 0;
            }
            if (owningEntity.vectorToOtherEntity(o1).magnitude()
                    - owningEntity.vectorToOtherEntity(o2).magnitude() < 0) {
                return -1;
            }
            return 1;
        }).collect(Collectors.toList()).get(0);
        return target;
    }
}
