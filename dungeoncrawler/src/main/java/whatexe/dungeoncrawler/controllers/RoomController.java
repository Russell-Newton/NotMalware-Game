package whatexe.dungeoncrawler.controllers;

import javafx.fxml.FXML;
import javafx.scene.layout.TilePane;
import javafx.scene.shape.Circle;
import whatexe.dungeoncrawler.ManagedController;
import whatexe.dungeoncrawler.Room;
import whatexe.dungeoncrawler.entities.Entity;
import whatexe.dungeoncrawler.entities.Player;

import java.util.LinkedList;
import java.util.List;

public class RoomController extends ManagedController {
    /*
    TODO - For Allison and Gabe:
        - FXML root should have an FXID and reference in the Controller code so that entities can
            be spawned in it after construction.
            There are alternatives, as long as Nodes can be added to the Scene from this Controller.
        - If desired, override the setState(Map) method to allow for enemies to be spawned in.
            This avoids the need for casting.
            Hint: an array of Enemies can be encoded as a value in the Map.
     */
    @FXML
    protected TilePane roomDisplay;
    private List<Entity> entities = new LinkedList<>();
    protected Player player = new Player(new Circle());
    private Room room;

    @Override
    public void init() {
        init(new Room());
    }

    public void init(Room room) {
        this.room = room;
        player = this.room.getPlayer();
        entities = this.room.getEntities();
        roomDisplay.getChildren().add(player.getDisplayNode());
        for (Entity e : entities) {
            roomDisplay.getChildren().add(e.getDisplayNode());
        }
    }

    // @Override
    // public void setState(Map<String, Object> stateParameters) {
    //     enemies = (Enemy[]) stateParameters.getOrDefault("enemies", new Enemy[0]);
    // }

    // public void changeRoom() {
    //     // this we can use the door to set the next room and load that RoomSubSCene onto LEvel SCene
    // }
}
