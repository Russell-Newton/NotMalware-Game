package whatexe.dungeoncrawler.controllers;

import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.transform.Scale;
import whatexe.dungeoncrawler.ManagedController;

import java.util.Random;

public class InventoryController extends ManagedController {

    @FXML
    private GridPane inventoryGrid;
    @FXML
    private GridPane modifiers;
    @FXML
    private Pane inventoryScreen;
    @FXML
    private Pane inventoryBackground;

    private Node pickedNode;
    int inventoryRows = 3;
    int inventoryCols = 8;

    @FXML
    public void initialize() {
        Random rand = new Random();
        for (int i = 0; i < inventoryRows; i++) {
            for (int j = 0; j < inventoryCols; j++) {
                Color color = new Color(rand.nextDouble(), rand.nextDouble(), rand.nextDouble(), 1);
                Rectangle rect = new Rectangle(32, 32, color);
                inventoryGrid.add(rect, j, i);
            }
        }
        inventoryBackground.setOnMouseMoved(event -> {
            double x = event.getX();
            double y = event.getY();
            movePickedNode(x, y);
        });
        for (int i = 0; i < 2; i++) {
            Empty empty = new Empty(32, 32);
            empty.getTransforms().add(new Scale(2, 2, 0, 0));
            modifiers.add(empty, i, 0);
        }
        inventoryBackground.setStyle("-fx-background-color: rgba(0, 0, 0, 0.5);");
        inventoryScreen.setStyle("-fx-background-color: rgba(50, 50, 50);");
    }

    @FXML
    public void inventoryClick(MouseEvent event) {
        if (event.getPickResult().getIntersectedNode() != inventoryGrid &&
                !(event.getPickResult().getIntersectedNode() instanceof Line)) {
            if (pickedNode == null) {
                Empty empty = new Empty(32, 32);
                System.out.println(event.getPickResult().getIntersectedNode().getClass());
                pickedNode = inventoryPickup(event, empty);
            } else {
                if (event.getPickResult().getIntersectedNode() instanceof Empty) {
                    inventoryPickup(event, pickedNode);
                    pickedNode = null;
                } else {
                    pickedNode = inventoryPickup(event, pickedNode);
                }
            }
        }
    }

    private Node inventoryPickup(MouseEvent event, Node replaceNode) {
        return pickup(event, replaceNode, inventoryGrid);
    }



    @FXML
    private void modifierClick(MouseEvent event) {
        if (event.getPickResult().getIntersectedNode() != modifiers &&
                !(event.getPickResult().getIntersectedNode() instanceof Line)) {
            if (pickedNode == null) {
                Empty empty = new Empty(32, 32);
                empty.getTransforms().add(new Scale(2, 2, 0, 0));
                pickedNode = modifierPickup(event, empty);
                pickedNode.getTransforms().clear();
            } else {
                pickedNode.getTransforms().add(new Scale(2, 2, 0, 0));
                if (event.getPickResult().getIntersectedNode() instanceof Empty) {
                    modifierPickup(event, pickedNode);
                    pickedNode = null;
                } else {
                    pickedNode = modifierPickup(event, pickedNode);
                    pickedNode.getTransforms().clear();
                }
            }
        }
    }

    private Node modifierPickup(MouseEvent event, Node replaceNode) {
        return pickup(event, replaceNode, modifiers);
    }

    private void movePickedNode(double x, double y) {
        if (pickedNode == null) {
            return;
        }
        pickedNode.setLayoutX(0);
        pickedNode.setLayoutY(0);
        pickedNode.setTranslateX(x - (pickedNode.getLayoutBounds().getWidth() / 2));
        pickedNode.setTranslateY(y - (pickedNode.getLayoutBounds().getHeight() / 2));
    }

    private Node pickup(MouseEvent event, Node replaceNode, GridPane inventoryGrid) {
        Node toPickUp = event.getPickResult().getIntersectedNode();
        int row = GridPane.getRowIndex(toPickUp);
        int col = GridPane.getColumnIndex(toPickUp);
        toPickUp.setLayoutX(inventoryScreen.getLayoutX() + inventoryGrid.getLayoutX() -
                                    (toPickUp.getLayoutBounds().getWidth() / 2));
        toPickUp.setLayoutY(inventoryScreen.getLayoutY() + inventoryGrid.getLayoutY() -
                                    (toPickUp.getLayoutBounds().getHeight() / 2));
        toPickUp.setTranslateX(event.getX());
        toPickUp.setTranslateY(event.getY());
        toPickUp.setMouseTransparent(true);
        inventoryGrid.getChildren().remove(toPickUp);
        replaceNode.setTranslateX(0);
        replaceNode.setTranslateY(0);
        replaceNode.setMouseTransparent(false);

        inventoryBackground.getChildren().add(toPickUp);
        inventoryGrid.add(replaceNode, col, row);

        return toPickUp;
    }

    @Override
    public void init() {

    }

    public static class Empty extends Rectangle {
        public Empty(int row, int col) {
            super(row, col);
            this.setOpacity(0);
        }
    }


}
