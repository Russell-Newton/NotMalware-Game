package whatexe.dungeoncrawler.controllers;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import whatexe.dungeoncrawler.*;
import whatexe.dungeoncrawler.entities.player.MalwareType;
import whatexe.dungeoncrawler.entities.player.Player;

import java.io.IOException;
import java.util.Map;

public class ConfigurationController extends ManagedController {
    @FXML
    private TextField nameInput;
    @FXML
    private RadioButton easyButton;
    @FXML
    private RadioButton normalButton;
    @FXML
    private RadioButton hardButton;
    @FXML
    private ComboBox<MalwareType> malwareChoice;
    @FXML
    private Text malwareDesciption;

    private static boolean isValidName(String name) {
        return !(name == null || name.trim().equals(""));
    }

    @Override
    public void init() {
        SceneManager.getInstance().addScene("Level",
                                            getClass().getResource("LevelDisplay.fxml"));

        ObservableList<MalwareType> malwareTypes =
                FXCollections.observableArrayList(MalwareType.values());
        malwareChoice.setItems(malwareTypes);
        malwareChoice.setValue(MalwareType.VIRUS);
        changeWeaponDesciption(null);
    }

    @FXML
    protected void proceed() throws IOException {
        Player player = new Player(Sprite.asRectangle(20, 20, Color.BLUE),
                                   malwareChoice.getValue());

        if (!isValidName(nameInput.getText())) {
            Alert noName = new Alert(Alert.AlertType.ERROR);
            noName.setHeaderText("Try Again");
            noName.setTitle("No Name input");
            noName.setContentText("Name cannot be empty");
            noName.initModality(Modality.WINDOW_MODAL);
            noName.initOwner(MainApp.getPrimaryStage());
            noName.showAndWait();
        } else {
            //to room 1
            MainApp.switchScene("Level", Map.of(
                    "difficulty", getDifficulty(),
                    "name", nameInput.getText(),
                    "player", player));

        }
    }

    private Difficulty getDifficulty() {
        if (easyButton.isSelected()) {
            return Difficulty.EASY;

        }
        if (hardButton.isSelected()) {
            return Difficulty.HARD;
        }
        return Difficulty.NORMAL;
    }

    @FXML
    protected void changeWeaponDesciption(ActionEvent event) {
        malwareDesciption.setText(malwareChoice.getValue().getDescription());
    }
}
