package whatexe.dungeoncrawler.controllers;

import javafx.fxml.FXML;
import javafx.scene.Cursor;
import javafx.scene.SubScene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.transform.Scale;
import whatexe.dungeoncrawler.*;
import whatexe.dungeoncrawler.entities.Sprite;
import whatexe.dungeoncrawler.entities.doors.Door;
import whatexe.dungeoncrawler.entities.items.Currency;
import whatexe.dungeoncrawler.entities.player.Player;
import whatexe.dungeoncrawler.layout.Direction;
import whatexe.dungeoncrawler.layout.Level;
import whatexe.dungeoncrawler.layout.generation.RoomPosition;
import whatexe.dungeoncrawler.layout.generation.SimpleLevelGenerator;
import whatexe.dungeoncrawler.layout.rooms.Room;

import java.io.IOException;
import java.util.Map;
import java.util.function.BiFunction;

public class LevelController extends ManagedController {

    /**
     * Encodes information of a {@link LevelController} and {@link RoomPosition} into a
     * consistent, unique String that can be used to add scenes to the {@link SceneManager}.
     */
    private static final BiFunction<LevelController, RoomPosition, String>
            SCENE_NAME_ENCODER = LevelController::encodeSceneName;

    @FXML
    protected AnchorPane parentPane;
    @FXML
    protected SubScene roomSubScene;
    @FXML
    protected Text minimapText;

    @FXML
    protected VBox leftSideGroup;

    @FXML
    protected Label healthLabel;
    @FXML
    protected ProgressBar healthBar;
    @FXML
    protected VBox healthGroup;

    @FXML
    protected Label moneyLabel;
    @FXML
    protected Pane moneyIcon;
    @FXML
    protected HBox moneyGroup;

    private String currentRoomSceneName;
    private Player player;
    private Room currentRoom;
    private Level level;
    private Difficulty difficulty = Difficulty.NORMAL;
    private Number seed;
    private final HudFormatter hudFormatter;


    public LevelController() throws IOException {
        currentRoomSceneName = null;
        currentRoom = null;
        level = null;
        hudFormatter = new HudFormatter();
    }

    private static String encodeSceneName(LevelController levelController,
                                          RoomPosition roomPosition) {
        return System.identityHashCode(levelController) + roomPosition.toString();
    }

    @Override
    public void init(Map<String, Object> loadParameters) {
        player = (Player) loadParameters.get("player");
        difficulty = (Difficulty) loadParameters.getOrDefault("difficulty", Difficulty.NORMAL);
        seed = (Number) loadParameters.getOrDefault("seed", Double.NaN);
        init();
    }

    @Override
    public void init() {
        roomSubScene.widthProperty().bind(parentPane.prefWidthProperty());
        roomSubScene.heightProperty().bind(parentPane.prefHeightProperty());

        //initialize Level
        if (Double.isNaN(seed.doubleValue())) {
            level = new SimpleLevelGenerator().generate();
        } else {
            level = new SimpleLevelGenerator(seed.longValue()).generate();
        }
        level.currentRoomPositionProperty()
             .addListener((observer, oldValue, newValue) -> updateRoom(oldValue, newValue));


        minimapText.setFont(Font.font(java.awt.Font.MONOSPACED, FontWeight.BOLD, 20));

        // Initialize moneyIcon image
        Sprite moneySprite = Currency.getDefaultDisplayNode();
        moneyIcon.getChildren().add(moneySprite);
        moneyIcon.getTransforms().add(new Scale(1.5, 1.5, 0, 0));

        // Add room scenes to SceneManger
        for (RoomPosition position : level.getMaze().keySet()) {
            SceneManager.getInstance().addScene(SCENE_NAME_ENCODER.apply(this, position),
                                                getClass().getResource("RoomDisplay.fxml"));
        }

        initPlayer();

        if (!SceneManager.getInstance().getLoaderMap().containsKey("EndScreen")) {
            SceneManager.getInstance().addScene("EndScreen",
                                                getClass().getResource("EndScreen.fxml"));
        }
    }

    @Override
    public void postInit() {
        player.initControls();
        updateRoom(null, level.getRoomPosition());
        currentRoom.initKillButton();
        MainApp.getPrimaryStage().sizeToScene();
        MainApp.getPrimaryStage().getScene().setCursor(Cursor.NONE);
    }

    @Override
    public void deinit() {
        currentRoom.stopTicking();
    }

    private void updateRoom(RoomPosition oldValue, RoomPosition newValue) {
        if (currentRoom != null) {
            currentRoom.setPlayer(null);
            currentRoom.stopTicking();
        }
        currentRoom = level.getCurrentRoom();

        if (currentRoomSceneName != null) {
            SceneManager.getInstance().unloadScene(currentRoomSceneName);
        }
        currentRoomSceneName =
                SCENE_NAME_ENCODER.apply(this, newValue);


        try {
            roomSubScene.setRoot(SceneManager.getInstance()
                                             .loadParent(currentRoomSceneName,
                                                         Map.of("room", currentRoom)));

        } catch (IOException e) {
            throw new RuntimeException("Cannot load next room! " + currentRoomSceneName);
        }

        currentRoom.initKillButton();
        currentRoom.updateDoorLocks();
        parentPane.prefWidthProperty().bind(((Pane) roomSubScene.getRoot()).prefWidthProperty());
        parentPane.prefHeightProperty().bind(((Pane) roomSubScene.getRoot()).prefHeightProperty());

        // TODO - why is this necessary??
        Button tempControl = new Button("temp");
        parentPane.getChildren().add(tempControl);
        parentPane.getChildren().remove(tempControl);

        minimapText.setText(level.mazeToString());

        hudFormatter.formatHud();

        adjustPlayerIncomingPosition(oldValue, newValue);

        currentRoom.setPlayer(player);
        currentRoom.startTicking();
    }

    protected void initPlayer() {
        // Set health data
        int startingHealth =
                (int) (difficulty.getDefaultHealth() * player.getMalwareType()
                                                             .getMaxHealthModifier());
        player.getEntityStatistics().setMaxHealth(startingHealth);
        player.setHealth(startingHealth);
        healthBar.setProgress(1);
        healthLabel.setTextFill(Color.LIGHTBLUE);
        healthLabel.setText(hudFormatter.healthFormat(player.getHealth()));
        player.healthProperty().addListener((text, oldValue, newValue) -> {
            double currentHealth = (int) newValue;
            healthBar.setProgress(currentHealth / (player.getEntityStatistics().getMaxHealth()));
            healthLabel.setText(hudFormatter.healthFormat(newValue.intValue()));
        });

        // Set money data
        int startingMoney = difficulty.getDefaultMoney();
        moneyLabel.setTextFill(Color.GOLD);
        player.setMoney(startingMoney);
        moneyLabel.setText(hudFormatter.moneyFormat(startingMoney));
        player.moneyProperty().addListener((text, oldValue, newValue) ->
                                                   moneyLabel.setText(hudFormatter.moneyFormat(
                                                           newValue.intValue())));
    }

    /**
     * When the player moves to the next room, it adjusts the player position so it looks like
     * they come out of that door
     * <p>
     * NOTE: This assumes that the doors are buttons. This method is going to have to change once
     * we change what the doors actually are!!!
     *
     * @param lastRoom the position of the room last visited
     * @param newRoom  the position of the room just entering
     */
    private void adjustPlayerIncomingPosition(RoomPosition lastRoom, RoomPosition newRoom) {
        if (lastRoom == null) {
            player.setEntityPosition(roomSubScene.getWidth() / 2, roomSubScene.getHeight() / 2);
            // System.out.println("Null lol");
            return;
        }
        Direction moveDirection = RoomPosition.getPrimaryDirectionFrom(newRoom, lastRoom);
        Door playerExitDoor = Door.getDoorFromList(currentRoom.getDoors(), moveDirection);
        Sprite doorNode = playerExitDoor.getDisplayNode();
        double width = doorNode.getWidth();
        double height = doorNode.getHeight();

        double dX;
        double dY;

        switch (moveDirection) {
        case DOWN:
            dX = width / 2 - player.getDisplayNode().getWidth() / 2;
            dY = -(player.getDisplayNode().getHeight() + 10);
            break;
        case RIGHT:
            dX = -(player.getDisplayNode().getWidth() + 10);
            dY = height / 2 - player.getDisplayNode().getHeight() / 2;
            break;
        case LEFT:
            dX = 10 + height;
            dY = height / 2 - player.getDisplayNode().getHeight() / 2;
            break;
        case UP:
            dX = width / 2 - player.getDisplayNode().getWidth() / 2;
            dY = 10 + height;
            break;
        default:
            throw new IllegalStateException("Unexpected value: " + moveDirection);
        }

        player.setEntityPosition(dX + doorNode.getTranslateX(),
                                 dY + doorNode.getTranslateY());
    }

    public Player getPlayer() {
        return player;
    }

    public Level getLevel() {
        return level;
    }

    public Room getCurrentRoom() {
        return currentRoom;
    }

    private class HudFormatter {
        private void formatHud() {
            relocateText();
        }

        private void relocateText() {
            double parentWidth = parentPane.getPrefWidth();
            double parentHeight = parentPane.getPrefHeight();
            double parentPadT = parentPane.getPadding().getTop();
            double parentPadB = parentPane.getPadding().getBottom();
            double parentPadL = parentPane.getPadding().getLeft();
            double parentPadR = parentPane.getPadding().getRight();

            // Minimap
            minimapText.setLayoutX(parentWidth
                                           - parentPadR
                                           - minimapText.getLayoutBounds().getWidth());
            minimapText.setLayoutY(parentHeight
                                           - parentPadB
                                           - minimapText.getLayoutBounds().getHeight());

            // Left-side group
            leftSideGroup.setLayoutX(parentPadL);
            leftSideGroup.setLayoutY(parentPadT);
        }

        private String moneyFormat(int money) {
            return String.format("x %d", money);
        }

        private String healthFormat(int health) {
            return String.format("Health: %d/%d",
                                 health,
                                 player.getEntityStatistics().getMaxHealth());
        }
    }
}
