package whatexe.dungeoncrawler.controllers;

import javafx.fxml.FXML;
import javafx.scene.SubScene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import whatexe.dungeoncrawler.Difficulty;
import whatexe.dungeoncrawler.MainApp;
import whatexe.dungeoncrawler.ManagedController;
import whatexe.dungeoncrawler.SceneManager;
import whatexe.dungeoncrawler.entities.Player;
import whatexe.dungeoncrawler.layout.Level;
import whatexe.dungeoncrawler.layout.Room;
import whatexe.dungeoncrawler.layout.RoomPosition;
import whatexe.dungeoncrawler.layout.SimpleLevelGenerator;

import java.io.IOException;
import java.util.Map;
import java.util.function.BiFunction;

public class LevelController extends ManagedController {

    /**
     * Encodes information of a {@link LevelController} and {@link RoomPosition} into a
     * consistent, unique String that can be used to add scenes to the {@link SceneManager}.
     */
    private static final BiFunction<LevelController, RoomPosition, String>
            SCENE_NAME_ENCODER = LevelController::encodeSceneName;

    @FXML
    protected AnchorPane parentPane;
    @FXML
    protected SubScene roomSubScene;
    @FXML
    protected Text minimapText;
    protected String currentRoomSceneName;
    protected Player player;
    protected Room currentRoom;
    @FXML
    private Label healthLabel;
    @FXML
    private ProgressBar healthBar;
    @FXML
    private Label moneyLabel;
    private Level level;

    private Difficulty difficulty = Difficulty.NORMAL;

    public LevelController() {
        currentRoomSceneName = null;
        currentRoom = null;
        level = null;

        player = new Player(new Rectangle(20, 20, Color.BLUE));
    }

    private static String encodeSceneName(LevelController levelController,
                                          RoomPosition roomPosition) {
        return System.identityHashCode(levelController) + roomPosition.toString();
    }

    @Override
    public void init(Map<String, Object> loadParameters) {
        player = (Player) loadParameters.getOrDefault("player", player);
        difficulty = (Difficulty) loadParameters.getOrDefault("difficulty", Difficulty.NORMAL);
        init();
    }

    @Override
    public void init() {
        roomSubScene.widthProperty().bind(parentPane.prefWidthProperty());
        roomSubScene.heightProperty().bind(parentPane.prefHeightProperty());

        //initialize Level
        level = new SimpleLevelGenerator().generate();
        level.currentRoomPositionProperty()
             .addListener((observer, oldValue, newValue) -> updateRoom());

        minimapText.setFont(Font.font(java.awt.Font.MONOSPACED, FontWeight.BOLD, 20));
        AnchorPane.setRightAnchor(minimapText, 50.);
        AnchorPane.setBottomAnchor(minimapText, 25.);

        // Add scenes to SceneManger
        for (RoomPosition position : level.getMaze().keySet()) {
            SceneManager.getInstance().addScene(SCENE_NAME_ENCODER.apply(this, position),
                                                getClass().getResource("RoomDisplay.fxml"));
        }

        initPlayer();

        SceneManager.getInstance().addScene("EndScreen",
                                            getClass().getResource("EndScreen.fxml"));
    }

    @Override
    public void postInit() {
        player.initControls();
        updateRoom();
        MainApp.getPrimaryStage().sizeToScene();
    }

    public void updateRoom() {
        if (currentRoom != null) {
            currentRoom.setPlayer(null);
            currentRoom.stopTicking();
        }
        currentRoom = level.getCurrentRoom();

        if (currentRoomSceneName != null) {
            SceneManager.getInstance().unloadScene(currentRoomSceneName);
        }
        currentRoomSceneName =
                SCENE_NAME_ENCODER.apply(this, level.currentRoomPositionProperty().get());

        try {
            roomSubScene.setRoot(SceneManager.getInstance()
                                             .loadParent(currentRoomSceneName,
                                                         Map.of("room", currentRoom)));

        } catch (IOException e) {
            throw new RuntimeException("Cannot load next room! " + currentRoomSceneName);
        }

        parentPane.prefWidthProperty().bind(((Pane) roomSubScene.getRoot()).prefWidthProperty());
        parentPane.prefHeightProperty().bind(((Pane) roomSubScene.getRoot()).prefHeightProperty());

        // TODO - why is this necessary??
        Button tempControl = new Button("temp");
        parentPane.getChildren().add(tempControl);
        parentPane.getChildren().remove(tempControl);

        minimapText.setText(level.mazeToString());

        currentRoom.setPlayer(player);
        currentRoom.startTicking();
    }

    protected void initPlayer() {
        int startingHealth;
        healthLabel.setTextFill(Color.LIGHTBLUE);
        moneyLabel.setTextFill(Color.GOLD);
        if (difficulty == Difficulty.EASY) { //just example variables
            player.setHealth(100);
            healthLabel.setText("Health: " + player.healthProperty().getValue() + " / 100");
            player.healthProperty().addListener(
                    (text, oldValue, newValue) ->
                            healthLabel.setText("Health: " + newValue + " / 100")
                                               );
            player.setMoney(50);
            moneyLabel.setText("Money: " + player.moneyProperty().getValue() + " / 50");
            player.moneyProperty().addListener(
                    (text, oldValue, newValue) ->
                            moneyLabel.setText("Money: " + newValue + " / 50")
                                              );
            startingHealth = 100;
        } else if (difficulty == Difficulty.NORMAL) {
            player.setHealth(50);
            healthLabel.setText("Health: " + player.healthProperty().getValue() + " / 50");
            player.healthProperty().addListener(
                    (text, oldValue, newValue) ->
                            healthLabel.setText("Health: " + newValue + " / 50")
                                               );
            player.setMoney(25);
            moneyLabel.setText("Money: " + player.moneyProperty().getValue() + " / 25");
            player.moneyProperty().addListener(
                    (text, oldValue, newValue) ->
                            moneyLabel.setText("Money: " + newValue + " / 25")
                                              );
            startingHealth = 50;
        } else {
            player.setHealth(20);
            healthLabel.setText("Health: " + player.healthProperty().getValue() + " / 20");
            player.healthProperty().addListener(
                    (text, oldValue, newValue) ->
                            healthLabel.setText("Health: " + newValue + " / 20")
                                               );
            player.setMoney(10);
            moneyLabel.setText("Money: " + player.moneyProperty().getValue() + " / 10");
            player.moneyProperty().addListener(
                    (text, oldValue, newValue) ->
                            moneyLabel.setText("Money: " + newValue + " / 10")
                                              );
            startingHealth = 20;
        }
        healthBar.setProgress(1);
        player.healthProperty().addListener(
                (text, oldValue, newValue) -> {
                    double currentHealth = (int) newValue;
                    healthBar.setProgress(currentHealth / (startingHealth));
                });
    }

    public Player getPlayer() {
        return player;
    }
}
